# data file for the Fltk User Interface Designer (fluid)
version 1.0009 
header_name {.H} 
code_name {.C} 
gridx 5 
gridy 5 
snap 3
Function {make_diskchooser()} {open
} {
  Fl_Window disk_chooser {
    label {Disk Usage Display} open
    xywh {192 212 404 252} resizable visible
  } {
    Fl_Button {} {
      label Reload
      callback reload_cb
      xywh {290 10 65 20}
    }
    Fl_Button {} {
      label {©}
      callback copyright_cb
      xywh {365 10 25 20} labelsize 18
    }
    Fl_Browser disk_browser {
      label {Select a file system:}
      callback disk_browser_cb
      xywh {15 30 375 150} type Hold align 5 resizable
      code0 {static int widths[] = {200,0};}
      code1 {o->column_widths(widths);}
    }
    Fl_Input disk_input {
      label {[OR] Enter a full path:}
      callback disk_input_cb
      xywh {15 200 335 25} align 5 when 10
      code0 {o->value("/");}
    }
    Fl_Button {} {
      label browser
      callback {const char* c = fl_file_chooser("Folder", 0, disk_input->value());
if (c) disk_input->value(c);}
      xywh {350 200 40 25} labelsize 8
      code0 {\#include <FL/Fl_File_Chooser.H>}
    }
    Fl_Check_Button {} {
      label {Measure folders only}
      xywh {15 225 185 25} type Radio down_box DIAMOND_DOWN_BOX
    }
    Fl_Check_Button all_files_button {
      label {Measure every file} selected
      xywh {190 225 145 25} type Radio down_box DIAMOND_DOWN_BOX value 1
    }
  }
} 

Function {make_wait_window()} {open
} {
  Fl_Window wait_window {open
    xywh {362 558 229 100} resizable hotspot modal visible
  } {
    Fl_Slider wait_slider {
      label {Scanning ...}
      xywh {10 25 205 25} type {Horz Fill} color 12 selection_color 47 align 5 resizable
      code0 {o->set_output();}
    }
    Fl_Button {} {
      label Cancel
      callback cancel_cb
      xywh {70 60 80 25} shortcut 0xff1b
    }
  }
} 

Function {make_print_panel()} {open
} {
  Fl_Window print_panel {
    label Print
    xywh {881 436 345 173} hotspot modal visible
  } {
    Fl_Box {} {
      label {Print to:}
      xywh {10 5 85 25} labelfont 1 labelsize 18 align 20
    }
    Fl_Light_Button {} {
      label printer
      xywh {10 35 75 25} type Radio value 1
    }
    Fl_Input print_command_input {
      xywh {85 35 250 25}
      code0 {o->value("lpr");}
    }
    Fl_Light_Button print_file_button {
      label file
      xywh {10 65 75 25} type Radio
    }
    Fl_Input print_file_input {
      xywh {85 65 215 25}
      code0 {o->value("xdiskusage.ps");}
    }
    Fl_Button {} {
      label browser
      callback {const char* c = fl_file_chooser("Print to:", "*.ps", print_file_input->value());
if (c) print_file_input->value(c);}
      xywh {300 65 36 25} labelsize 8
      code0 {\#include <FL/Fl_File_Chooser.H>}
    }
    Fl_Group {} {open
      xywh {10 90 325 35} align 4
    } {
      Fl_Check_Button print_portrait_button {
        label portrait
        xywh {10 90 80 25} type Radio down_box DIAMOND_DOWN_BOX value 1
      }
      Fl_Check_Button {} {
        label landscape
        xywh {90 90 100 25} type Radio down_box DIAMOND_DOWN_BOX
      }
    }
    Fl_Group {} {open
      xywh {10 110 330 45} align 4
    } {
      Fl_Check_Button fill_page_button {
        label {reshape to fill page}
        xywh {10 115 150 25} type Radio down_box DIAMOND_DOWN_BOX value 1
      }
      Fl_Check_Button {} {
        label {same shape as window}
        xywh {160 115 175 25} type Radio down_box DIAMOND_DOWN_BOX
      }
    }
    Fl_Return_Button print_ok_button {
      label OK
      xywh {175 140 75 25}
    }
    Fl_Button {} {
      label Cancel
      callback {o->window()->hide();}
      xywh {260 140 75 25} shortcut 0xff1b
    }
  }
} 
